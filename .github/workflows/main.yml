name: Docker CI/CD Zoo
on:
  push:   #Cada vez que se haga push
    branches:
    - main   #En la rama main
jobs:
  build:
    name: CI/CD Imagen Docker Apache
    runs-on: ubuntu-latest

    env:   #Creo una variable $IMG con el nombre completo de la imagen
      IMG: ${{ secrets.DOCKERHUB_USERNAME }}/apachezoo:latest

#Pasos que va a seguir:
    steps:
    - name: Checkout del repositorio   #El runner de GH Actions copia el contenido del repo
      uses: actions/checkout@v4.1.5

    - name: Login a Docker Hub   #Inicio sesión en mi cuenta de Docker Hub
      uses: docker/login-action@v3.2.0
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Docker build   #Creo la imagen a partir del Dockerfile
      run: |
        docker build --platform linux --tag $IMG -f Dockerfile .

    - name: Push de la imagen a Docker Hub   #La nueva versión se sube a Docker Hub
      run: |
        docker push $IMG

    - name: Lanzar en Deployment server   #Mediante SSH, se ejecutan comandos en Deployment server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: 3.83.147.15
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}   #Para esto hace falta crear par de claves asimetricas
        script: |
          cd deploy/
          git pull origin main   #Actualizo cambios en el repositorio remoto
          docker compose down   #Desactivo los contenedores en funcionamiento
          docker compose pull apache   #Asegurar que usa la ultima version de la imagen usada para el servicio apache
          docker compose up -d   #Levanta los contenedores en segundo plano
